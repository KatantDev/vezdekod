import logging
import sqlite3
import os

from random import choice
from uuid import uuid4

import aiofiles
import aiohttp
from vkbottle import Keyboard, Callback, Text, Location, OpenLink, VKPay, KeyboardButtonColor, BaseStateGroup, \
    ShowSnackbarEvent
from vkbottle.bot import Bot, Message, MessageEvent
from vkbottle.dispatch.rules.base import AttachmentTypeRule
from vkbottle.tools import PhotoMessageUploader
from vkbottle_types.events import GroupEventType

bot = Bot('f0f3a22ec2abe93c03ec507b6f5f8f1068ba01c12879b42ffd64981f9fb5c0125f6659c2d7e3f9a854c19')
logging.basicConfig(level=logging.INFO)

con = sqlite3.connect('vezdekod.db')
cur2 = con.cursor()
con.row_factory = lambda cursor, row: row[0]
cur = con.cursor()


class States(BaseStateGroup):
    Question1 = 0
    Question2 = 1
    Question3 = 2
    Question4 = 3
    Question5 = 4
    Question6 = 5
    Question7 = 6
    Question8 = 7
    LoadMeme = 8


@bot.on.private_message(text='–ü—Ä–∏–≤–µ—Ç')
async def handler(message: Message):
    question = Keyboard(inline=True)
    question.add(Callback('–î–∞, –∫–æ–Ω–µ—á–Ω–æ', {"cmd": "yes"}), color=KeyboardButtonColor.POSITIVE)

    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç –≤–µ–∑–¥–µ–∫–æ–¥–µ—Ä–∞–º! –ú–æ–≥—É –ª–∏ —è –∑–∞–¥–∞—Ç—å –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤?',
        keyboard=question.get_json()
    )
    await bot.state_dispenser.set(message.peer_id, States.Question1)


@bot.on.raw_event(GroupEventType.MESSAGE_EVENT, dataclass=MessageEvent,
                  func=lambda event: event.object.payload['cmd'] == 'yes')
async def _(event: MessageEvent):
    question = Keyboard(inline=True)
    question.add(Text('–û—Ç–ª–∏—á–Ω–æ'), color=KeyboardButtonColor.NEGATIVE)
    question.add(Text('–¢–∞–∫ —Å–µ–±–µ :('), color=KeyboardButtonColor.PRIMARY)
    question.row()
    question.add(Text('–ú–æ–≥–ª–æ –±—ã—Ç—å –∏ –ª—É—á—à–µ'), color=KeyboardButtonColor.SECONDARY)

    await event.send_message(
        message='–ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?',
        keyboard=question.get_json()
    )
    await bot.state_dispenser.set(event.peer_id, States.Question2)


@bot.on.private_message(text=['–û—Ç–ª–∏—á–Ω–æ', '–¢–∞–∫ —Å–µ–±–µ :(', '–ú–æ–≥–ª–æ –±—ã—Ç—å –∏ –ª—É—á—à–µ'], state=States.Question2)
async def _(message: Message):
    question = Keyboard(one_time=True, inline=False)
    question.add(Location({'cmd': 'send_location'}), color=KeyboardButtonColor.NEGATIVE)
    question.row()
    question.add(Text('–Ø –¥–æ–µ–¥—É —Å–∞–º(–∞)'), color=KeyboardButtonColor.SECONDARY)
    await message.answer(
        '–ü—Ä–µ–¥–ª–∞–≥–∞—é —Å—ä–µ–∑–¥–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è –≤ –∫–∏–Ω–æ, —è –≤—ã–∑–æ–≤—É —Ç–µ–±–µ —Ç–∞–∫—Å–∏. –ü–æ–¥—Å–∫–∞–∂–∏, –≥–¥–µ —Ç—ã –∂–∏–≤—ë—à—å?',
        keyboard=question.get_json()
    )
    await bot.state_dispenser.set(message.peer_id, States.Question3)


@bot.on.private_message(func=lambda message: message.geo, state=States.Question3)
@bot.on.private_message(text='–Ø –¥–æ–µ–¥—É —Å–∞–º(–∞)', state=States.Question3)
async def _(message: Message):
    question = Keyboard(one_time=True, inline=False)
    question.add(OpenLink('https://afisha.yandex.ru/moscow/cinema/brat-1997', '–ë—Ä–∞—Ç (Mori Cinema)'))
    question.add(Text('–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∏–¥—ë–º!'), color=KeyboardButtonColor.SECONDARY)

    await message.answer(
        '–Ø —É–∂–µ –≤—ã–±—Ä–∞–ª –∫–∏–Ω–æ, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞ —á—Ç–æ –º—ã –∏–¥–µ–º.\n–ö–∞–∫ —Ç–µ–±–µ?',
        keyboard=question.get_json()
    )
    await bot.state_dispenser.set(message.peer_id, States.Question4)


@bot.on.private_message(text='–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∏–¥—ë–º!', state=States.Question4)
async def _(message: Message):
    question = Keyboard(inline=True)
    question.add(VKPay(hash='action=transfer-to-group&group_id=212552911'))
    question.row()
    question.add(Text('–ü–µ—Ä–µ–≤–µ–ª(–∞)!'), color=KeyboardButtonColor.POSITIVE)
    question.add(Text('–Ø –æ–ø–ª–∞—á—É —Å–∞–º(–∞)'), color=KeyboardButtonColor.NEGATIVE)

    await message.answer(
        '–Ø –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –±–µ—Ä—É –±–∏–ª–µ—Ç—ã. –ü–µ—Ä–µ–≤–µ–¥–µ—à—å 250 —Ä—É–±–ª–µ–π?',
        keyboard=question.get_json()
    )
    await bot.state_dispenser.set(message.peer_id, States.Question5)


@bot.on.private_message(text=['–ü–µ—Ä–µ–≤–µ–ª(–∞)!', '–Ø –æ–ø–ª–∞—á—É —Å–∞–º(–∞)'], state=States.Question5)
async def _(message: Message):
    question = Keyboard(one_time=True, inline=False)
    question.add(Text('–û—Ç–ª–∏—á–Ω–æ'), color=KeyboardButtonColor.POSITIVE)
    question.add(Text('–¢–∞–∫ —Å–µ–±–µ'), color=KeyboardButtonColor.NEGATIVE)

    await message.answer(
        '–û—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ –º–µ–º–∞–º?',
        keyboard=question.get_json()
    )
    await bot.state_dispenser.set(message.peer_id, States.Question6)


@bot.on.private_message(text=['–û—Ç–ª–∏—á–Ω–æ', '–¢–∞–∫ —Å–µ–±–µ'], state=States.Question6)
async def _(message: Message):
    question = Keyboard(inline=True)
    question.add(Text('–î–∞, –∫–æ–Ω–µ—á–Ω–æ'), color=KeyboardButtonColor.POSITIVE)

    await message.answer(
        '–£ –º–µ–Ω—è –µ—Å—Ç—å —à—Ç—É–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∏—Ö –ø–æ–ª—é–±–∏—Ç—å, –ø–æ—Å–º–æ—Ç—Ä–∏—à—å?',
        keyboard=question.get_json()
    )
    await bot.state_dispenser.set(message.peer_id, States.Question7)


@bot.on.private_message(text='–î–∞, –∫–æ–Ω–µ—á–Ω–æ', state=States.Question7)
async def _(message: Message):
    question = Keyboard(inline=True)
    question.add(Text('–¢–æ—á–Ω–æ!'), color=KeyboardButtonColor.SECONDARY)

    await message.answer(
        '–¢—ã —Ç–æ—á–Ω–æ –≥–æ—Ç–æ–≤?',
        keyboard=question.get_json()
    )
    await bot.state_dispenser.set(message.peer_id, States.Question8)


@bot.on.private_message(text='–ú–µ–Ω—é')
@bot.on.private_message(text='–¢–æ—á–Ω–æ!', state=States.Question8)
async def _(message: Message):
    question = Keyboard(inline=False)
    question.add(Text('–ú–µ–º'), color=KeyboardButtonColor.POSITIVE)
    question.add(Text('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'), color=KeyboardButtonColor.POSITIVE)
    question.row()
    question.add(Text('–¢–æ–ø-9 –ú–µ–º–æ–≤'), color=KeyboardButtonColor.SECONDARY)
    question.add(Text('–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–º'), color=KeyboardButtonColor.SECONDARY)

    await message.answer(
        '–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ß—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?',
        keyboard=question.get_json()
    )

    try:
        await bot.state_dispenser.delete(message.peer_id)
    except KeyError:
        pass


@bot.on.private_message(text='–ú–µ–º')
async def _(message: Message):
    all_photos = os.listdir('./photos/')
    rated_photos = cur.execute('SELECT photo_id FROM memes WHERE user_id=?', (message.peer_id,)).fetchall()
    photos = list(set(all_photos) ^ set(rated_photos))
    print(photos)
    if len(photos) == 0:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ–º—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ;(')
        return
    file = choice(list(set(all_photos) ^ set(rated_photos)))

    uploader = PhotoMessageUploader(bot.api, generate_attachment_strings=True)
    attachment = await uploader.upload(file_source=f'./photos/{file}')
    print(attachment)

    rate = Keyboard(inline=True)
    rate.add(Callback('–õ–∞–π–∫ üëçüèª', {'cmd': 'like', 'file': file, 'photo': attachment}),
             color=KeyboardButtonColor.POSITIVE)
    rate.add(Callback('–î–∏–∑–ª–∞–π–∫ üëéüèª', {'cmd': 'dislike', 'file': file, 'photo': attachment}),
             color=KeyboardButtonColor.NEGATIVE)
    await message.answer(attachment=attachment, keyboard=rate.get_json())


@bot.on.raw_event(GroupEventType.MESSAGE_EVENT, dataclass=MessageEvent,
                  func=lambda event: event.object.payload['cmd'] == 'like' or event.object.payload['cmd'] == 'dislike')
async def _(event: MessageEvent):
    cur.execute('SELECT photo_id FROM memes WHERE user_id=? AND photo_id=?',
                (event.peer_id, event.object.payload['file']))
    resp = cur.fetchone()
    print(resp)
    if resp is None:
        cur.execute('INSERT INTO memes VALUES (?, ?, ?)', (event.object.payload['file'], event.peer_id,
                                                           event.object.payload['cmd']))
        con.commit()

        await event.send_message_event_answer(event_data=ShowSnackbarEvent(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!'))
    else:
        await event.send_message_event_answer(event_data=ShowSnackbarEvent(text='–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ—Ç –º–µ–º!'))


@bot.on.private_message(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def _(message: Message):
    cur.execute('SELECT photo_id FROM memes WHERE user_id=? AND types=?', (message.peer_id, 'like'))
    my_likes = len(cur.fetchall())
    cur.execute('SELECT photo_id FROM memes WHERE user_id=? AND types=?', (message.peer_id, 'dislike'))
    my_dislikes = len(cur.fetchall())

    cur.execute('SELECT photo_id FROM memes WHERE types=?', ('like',))
    all_likes = len(cur.fetchall())
    cur.execute('SELECT photo_id FROM memes WHERE types=?', ('dislike',))
    all_dislikes = len(cur.fetchall())
    await message.answer('üëª –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n'
                         f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ª–∞–π–∫–∞–Ω–Ω—ã—Ö –º–µ–º–æ–≤: {my_likes} —Ñ–æ—Ç–æ\n'
                         f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∏–∑–ª–∞–π–∫–∞–Ω–Ω—ã—Ö –º–µ–º–æ–≤: {my_dislikes} —Ñ–æ—Ç–æ\n\n'
                         f'üò® –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n'
                         f'–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ª–∞–π–∫–æ–≤: {all_likes}\n'
                         f'–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–∏–∑–ª–∞–π–∫–æ–≤: {all_dislikes}')


@bot.on.private_message(text='–¢–æ–ø-9 –ú–µ–º–æ–≤')
async def _(message: Message):
    top = cur2.execute(
        'SELECT photo_id, COUNT(photo_id) '
        'FROM memes '
        'WHERE types="like" '
        'GROUP BY photo_id '
        'ORDER BY COUNT(photo_id) DESC '
        'LIMIT 9'
    ).fetchall()
    for i in range(len(top)):
        print(top[i], top[i][0])
        uploader = PhotoMessageUploader(bot.api, generate_attachment_strings=True)
        attachment = await uploader.upload(file_source=f'./photos/{top[i][0]}')

        await message.answer(
            f'ü§ñ –ú–µ—Å—Ç–æ ‚Ññ{i+1} (–õ–∞–π–∫–æ–≤: {top[i][1]})',
            attachment=attachment
        )


@bot.on.private_message(text='–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–º')
async def _(message: Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –º–µ–º–æ–º –∏ –µ–≥–æ —Å–º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.')
    await bot.state_dispenser.set(message.peer_id, States.LoadMeme)


@bot.on.private_message(AttachmentTypeRule('photo'), state=States.LoadMeme)
async def _(message: Message):
    if len(message.get_photo_attachments()) == 1:
        async with aiohttp.ClientSession() as session:
            url = message.get_photo_attachments()[0].sizes[-5].url
            async with session.get(url) as resp:
                f = await aiofiles.open(f'./photos/{uuid4()}.jpg', mode='wb')
                await f.write(await resp.read())
                await f.close()
        await message.answer('–í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –º–µ–º–æ–≤, '
                             '—Ç–µ–ø–µ—Ä—å –µ—ë —Å–º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.')
        await bot.state_dispenser.delete(message.peer_id)

    else:
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.')


bot.run_forever()
